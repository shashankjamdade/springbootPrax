name: Build and Push Docker Image

on:
  push:
    branches:
      - master_grpc   # trigger on push to master_grpc
  pull_request:

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Set up JDK (for Maven build)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Build JAR with Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # 4. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. Build and push image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: jshashank388/mongox:latest


      # 8. Deploy to Railway using CLI Docker image
      - name: Install Railway CLI
        run: |
          curl -sSL https://railway.app/install.sh | sh

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
        run: |
          railway up --detach --service mongox

      # 6. Deploy on EC2 via SSH
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            docker pull jshashank388/mongox:latest &&
            docker stop mongox || true &&
            docker rm mongox || true &&
            docker run -d --name mongox \
              -p 8080:8080 -p 9090:9090 \
              -e MONGODB_URI=${{ secrets.MONGODB_URI }} \
              -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
              -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              jshashank388/mongox:latest
          "





#name: Build and Push Docker Image
#
#on:
#  push:
#    branches:
#      - master_grpc   # runs when you push to main branch
#  pull_request:
#
#jobs:
#  docker:
#    runs-on: ubuntu-latest
#
#    steps:
#      # 1. Checkout code
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      # 2. Set up JDK (for Maven build)
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      # 3. Build JAR with Maven
#      - name: Build with Maven
#        run: mvn clean package -DskipTests
#
#      # 4. Log in to Docker Hub
#      - name: Log in to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      # 5. Build and push image
#      - name: Build and Push Docker Image
#        uses: docker/build-push-action@v4
#        with:
#          push: true
#          tags: jshashank388/mongox:latest
#
#      # 6. Configure AWS CLI (needed to push secrets into SSM)
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: eu-north-1   # adjust if your SSM is in a different region
#
#      # 7. Store AWS creds in SSM Parameter Store
#      - name: Store AWS creds in SSM
#        run: |
#          aws ssm put-parameter \
#            --name "/springboot/aws/access-key" \
#            --value "${{ secrets.AWS_ACCESS_KEY_ID }}" \
#            --type String --overwrite
#          aws ssm put-parameter \
#            --name "/springboot/aws/secret-key" \
#            --value "${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
#            --type String --overwrite
#
#      # 8. Deploy to Railway using CLI Docker image
#      - name: Install Railway CLI
#        run: |
#          curl -sSL https://railway.app/install.sh | sh
#
#      - name: Deploy to Railway
#        env:
#          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
#          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
#        run: |
#          railway up --detach --service mongox
#
#      # 9. Deploy on EC2 via SSH
#      - name: Setup SSH
#        uses: webfactory/ssh-agent@v0.7.0
#        with:
#          ssh-private-key: ${{ secrets.EC2_KEY }}
#
#      - name: Deploy on EC2
#        run: |
#          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
#            docker pull jshashank388/mongox:latest &&
#            docker stop mongox || true &&
#            docker rm mongox || true &&
#            docker run -d --name mongox -p 8080:8080 -p 9090:9090\
#              -e MONGODB_URI=${{ secrets.MONGODB_URI }} \
#              -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
#              -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
#              jshashank388/mongox:latest
#          "
#
#
#
#
